name: CI/CD

on:
  push:
    branches:
      - master
      - develop
  pull_request:
    branches:
      - master
      - develop

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    timeout-minutes: 360
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'csharp' ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}

      - name: Build .NET application
        run: dotnet build --configuration Release

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  test:
    runs-on: self-hosted
    needs: analyze
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 6.0.100

      - name: Restore dependencies
        run: dotnet restore

      - name: Test
        run: dotnet test

  sonarcloud:
    runs-on: windows-latest
    needs: test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu'

      # ... (rest of the SonarCloud configuration remains unchanged)

  build-and-deploy:
    runs-on: self-hosted
    needs: [sonarcloud, test]
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
    
    steps:
      - name: Pull Data from main branch
        uses: actions/checkout@v2

      - name: Build Docker images
        run: |
          sudo docker-compose -f docker-compose.yml build 
          sudo docker save itemmicroservice > itemmicroservice.tar 

      - name: Transfer Docker Image to Server
        run: |
          sshpass -p ${{ secrets.PASSWORD }} scp -o StrictHostKeyChecking=no itemmicroservice.tar ${{ secrets.USERNAME }}@${{ secrets.HOST }}:/root/
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock

      - name: Load Docker Image on Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: 22
          script: |
            ./resetimages.sh

      - name: Remove Docker Images
        run: sudo docker image prune -a -f
